"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("./lib/debug"));
const managerCounterMap = new WeakMap();
const classCounter = (instance) => {
    const counter = managerCounterMap.get(instance) || ((x) => x);
    return counter();
};
class InstanceManager {
    constructor() {
        this.idToClassMap = new Map();
        this.classToIdMap = new Map();
        this.classToOptionsMap = new WeakMap();
        this.classToIdToInstanceMap = new WeakMap();
        this.classToInstanceToIdMap = new WeakMap();
        this.classToInstanceCounterMap = new WeakMap();
        managerCounterMap.set(this, createCounter());
    }
    getClassById(id) {
        return this.idToClassMap.get(id);
    }
    setClassById(id, klass) {
        return this.idToClassMap.set(id, klass);
    }
    getClassId(classOrInstance) {
        const klass = this.resolveClass(classOrInstance);
        return this.classToIdMap.get(klass);
    }
    setClassId(id, classOrInstance) {
        const klass = this.resolveClass(classOrInstance);
        this.classToIdMap.set(klass, id);
    }
    getClassOptions(classOrInstance) {
        const klass = this.resolveClass(classOrInstance);
        const klassOptions = this.classToOptionsMap.get(klass);
        if (!klassOptions)
            return;
        return Object.assign({}, klassOptions);
    }
    getClassOptionsById(id) {
        const klass = this.getClassById(id);
        if (!klass) {
            throw Error(`Cannot find a class by ID ${id}`);
        }
        return this.getClassOptions(klass);
    }
    setClassOptions(classOrInstance, options) {
        const klass = this.resolveClass(classOrInstance);
        this.classToOptionsMap.set(klass, options);
    }
    setClassOptionsById(id, options) {
        const klass = this.getClassById(id);
        if (!klass) {
            throw Error(`Cannot find a class by ID ${id}`);
        }
        this.classToOptionsMap.set(klass, options);
    }
    resolveClass(classOrInstance) {
        return (classOrInstance.constructor.name === 'Function'
            ? classOrInstance
            : classOrInstance.constructor);
    }
    getClassInstance(classOrInstance, instanceId) {
        const klass = this.resolveClass(classOrInstance);
        const instanceMap = this.classToIdToInstanceMap.get(klass);
        if (!instanceMap)
            return;
        return instanceMap.get(instanceId);
    }
    setClassInstance(instance, instanceId) {
        const klass = instance.constructor;
        const instanceMap = this.classToIdToInstanceMap.get(klass);
        if (!instanceMap) {
            throw Error(`No id->instance map found for class ${klass}`);
        }
        instanceMap.set(instanceId, instance);
        const instanceIdMap = this.classToInstanceToIdMap.get(klass);
        if (!instanceIdMap) {
            throw Error(`No instance->id map found for class ${klass}`);
        }
        instanceIdMap.set(instance, instanceId);
    }
    removeClassInstance(classOrInstance, instanceId) {
        const klass = this.resolveClass(classOrInstance);
        const instance = this.getClassInstance(klass, instanceId);
        const instanceMap = this.classToIdToInstanceMap.get(klass);
        if (!instanceMap) {
            throw Error(`No id->instance map found for class ${klass}`);
        }
        instanceMap.delete(instanceId);
        const instanceIdMap = this.classToInstanceToIdMap.get(klass);
        if (!instanceIdMap) {
            throw Error(`No instance->id map found for class ${klass}`);
        }
        instanceIdMap.delete(instance);
    }
    getInstanceId(instance) {
        const klass = instance.constructor;
        const instanceIdMap = this.classToInstanceToIdMap.get(klass);
        if (!instanceIdMap)
            return;
        return instanceIdMap.get(instance);
    }
    addClass(classOrInstance, options) {
        const klass = this.resolveClass(classOrInstance);
        const klassId = this.classToIdMap.get(klass);
        if (klassId !== undefined) {
            debug_1.default(`Class ${klass.name} (ID: ${klassId}) is already registered.`);
            return;
        }
        const id = classCounter(this);
        this.setClassById(id, klass);
        this.setClassId(id, klass);
        if (options !== undefined) {
            this.setClassOptions(klass, options);
        }
        this._createClassInstanceMaps(klass);
        debug_1.default(`Registered class ${klass.name} (ID: ${id})`);
        return id;
    }
    removeClass(classOrInstance) {
        const klass = this.resolveClass(classOrInstance);
        const klassId = this.classToIdMap.get(klass);
        if (klassId === undefined)
            return false;
        this._removeClassInstanceMaps(klass);
        this.classToOptionsMap.delete(klass);
        this.idToClassMap.delete(klassId);
        this.classToIdMap.delete(klass);
        debug_1.default(`Removed class ${klass.name} (ID: ${klassId}`);
        return true;
    }
    addInstance(instance) {
        const klass = instance.constructor;
        const klassId = this.classToIdMap.get(klass);
        if (klassId === undefined)
            this.addClass(klass);
        const instanceIdCounter = this.classToInstanceCounterMap.get(klass);
        const instanceId = instanceIdCounter();
        this.setClassInstance(instance, instanceId);
        debug_1.default(`Added instance (ID: ${instanceId}) to class ${klass.name}` +
            `(ID: ${klassId})`);
        return instanceId;
    }
    removeInstance(instance) {
        const id = this.getInstanceId(instance);
        if (!id) {
            debug_1.default(`No instance with ID: ${id} found`);
            return false;
        }
        this.removeClassInstance(instance, id);
        debug_1.default(`Removed instance (ID: ${id})`);
        return true;
    }
    _createClassInstanceMaps(klass) {
        let instanceMap = this.classToIdToInstanceMap.get(klass);
        if (!instanceMap) {
            instanceMap = new Map();
            this.classToIdToInstanceMap.set(klass, instanceMap);
        }
        let instanceIdMap = this.classToInstanceToIdMap.get(klass);
        if (!instanceIdMap) {
            instanceIdMap = new WeakMap();
            this.classToInstanceToIdMap.set(klass, instanceIdMap);
        }
        let counter = this.classToInstanceCounterMap.get(klass);
        if (!counter) {
            counter = createCounter();
            this.classToInstanceCounterMap.set(klass, counter);
        }
    }
    _removeClassInstanceMaps(klass) {
        this.classToIdToInstanceMap.delete(klass);
        this.classToInstanceToIdMap.delete(klass);
        this.classToInstanceCounterMap.delete(klass);
    }
}
function createCounter(incrementor = (c) => c + 1) {
    let count = 0;
    return () => {
        count = incrementor(count);
        return count;
    };
}
exports.default = InstanceManager;
