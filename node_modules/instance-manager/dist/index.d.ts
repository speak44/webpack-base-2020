declare type Constructor<T> = new (...agrs: any[]) => T;
declare type Class<T> = Constructor<T>;
declare type IdToClassMap<T> = Map<number, Class<T>>;
declare type ClassToIdMap<T> = Map<Class<T>, number>;
declare type ClassToOptionsMap<T, O> = WeakMap<Class<T>, O>;
declare type IdToInstanceMap<T> = Map<number, T>;
declare type ClassToIdToInstanceMap<T> = WeakMap<Class<T>, IdToInstanceMap<T>>;
declare type InstanceToIdMap<T extends object> = WeakMap<T, number>;
declare type ClassToInstToIdMap<T extends object> = WeakMap<Class<T>, InstanceToIdMap<T>>;
declare type ClassToInstCounterMap<T> = WeakMap<Class<T>, () => number>;
declare class InstanceManager<I extends {} = any, O = any> {
    idToClassMap: IdToClassMap<I>;
    classToIdMap: ClassToIdMap<I>;
    classToOptionsMap: ClassToOptionsMap<I, O>;
    classToIdToInstanceMap: ClassToIdToInstanceMap<I>;
    classToInstanceToIdMap: ClassToInstToIdMap<I>;
    classToInstanceCounterMap: ClassToInstCounterMap<I>;
    constructor();
    getClassById(id: number): Constructor<I> | undefined;
    setClassById(id: number, klass: Class<I>): IdToClassMap<I>;
    getClassId(classOrInstance: I | Class<I>): number | undefined;
    setClassId(id: number, classOrInstance: I | Class<I>): void;
    getClassOptions(classOrInstance: I | Class<I>): ({} & O) | undefined;
    getClassOptionsById(id: number): ({} & O) | undefined;
    setClassOptions(classOrInstance: I | Class<I>, options: O): void;
    setClassOptionsById(id: number, options: O): void;
    resolveClass(classOrInstance: I | Class<I>): Constructor<I>;
    getClassInstance(classOrInstance: I | Class<I>, instanceId: number): I | undefined;
    setClassInstance(instance: I, instanceId: number): void;
    removeClassInstance(classOrInstance: I | Class<I>, instanceId: number): void;
    getInstanceId(instance: I): number | undefined;
    addClass(classOrInstance: I | Class<I>, options?: O): number | undefined;
    removeClass(classOrInstance: I | Class<I>): boolean;
    addInstance(instance: I): number;
    removeInstance(instance: I): boolean;
    _createClassInstanceMaps(klass: Class<I>): void;
    _removeClassInstanceMaps(klass: Class<I>): void;
}
export default InstanceManager;
