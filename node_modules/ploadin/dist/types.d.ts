import type InstanceManager from 'instance-manager';
declare type Constructor<T> = new (...args: any[]) => T;
export declare type ClassId = ReturnType<InstanceManager['addClass']>;
export declare type NonNullClassId = NonNullable<ClassId>;
export declare type InstanceId = ReturnType<InstanceManager['addClass']>;
export declare type NonNullInstanceId = NonNullable<InstanceId>;
export declare type Instance<T extends Ploadin = Ploadin> = T;
export declare type Subclass<T extends Instance = Instance> = Constructor<T>;
export declare type LoaderContext = any;
export declare type LoaderOptions = {
    [key: string]: any;
} & {
    classId: ClassId;
    instanceId: InstanceId;
};
export declare type LoaderFunc = (this: LoaderContext, source?: string, sourceMap?: string, ...args: any[]) => void;
export declare type PitchFunc = (this: LoaderContext, remainingRequest: string, precedingRequest: string, ...args: any[]) => void;
export interface Ploadin {
    asLoader: {
        loader: string;
        query: {
            classId: ClassId;
            instanceId: InstanceId;
        };
    };
    loader?: LoaderFunc;
    pitch?: PitchFunc;
    apply?: Function;
}
export {};
