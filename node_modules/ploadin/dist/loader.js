"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const loader_utils_1 = __importDefault(require("loader-utils"));
const provider_1 = __importDefault(require("./lib/provider"));
const debug_1 = __importDefault(require("./lib/debug"));
const classMapProxy = new Map();
const instanceMapProxy = new Map();
const instanceByIdMap = new WeakMap();
function getCachedInstance(classId, instanceId) {
    const instanceKeyMap = classMapProxy.get(classId);
    const instanceKey = instanceKeyMap === null || instanceKeyMap === void 0 ? void 0 : instanceKeyMap.get(instanceId);
    return instanceByIdMap.get(instanceKey);
}
function cacheInstance(classId, instanceId, instance) {
    let instanceKeyMap = classMapProxy.get(classId);
    if (instanceKeyMap === undefined) {
        debug_1.default(`Adding instance key map for classId: ${classId}`);
        instanceKeyMap = new Map();
        classMapProxy.set(classId, instanceKeyMap);
    }
    let instanceKey = instanceMapProxy.get(instanceId);
    if (instanceKey === undefined) {
        debug_1.default(`Adding instance proxy for classId: ${classId}`);
        instanceKey = { id: instanceId };
        instanceMapProxy.set(instanceId, instanceKey);
    }
    debug_1.default(`Caching instance for classId: ${classId} instanceId: ${instanceId}`);
    return instanceByIdMap.set(instanceKey, instance);
}
function getPloadin(loaderContext) {
    const { classId, instanceId } = loader_utils_1.default.getOptions(loaderContext);
    if (classId === undefined) {
        throw Error('[Ploadin][loader] Class ID not found. Cannot search for Ploadin ' +
            'instance');
    }
    if (instanceId === undefined) {
        throw Error('[Ploadin][loader] Instance ID not found. Cannot search for Ploadin ' +
            'instance');
    }
    const cachedInstance = getCachedInstance(classId, instanceId);
    if (cachedInstance) {
        debug_1.default(`Cached instance found for classId: ${classId} instanceId: ` +
            `${instanceId}`);
        return cachedInstance;
    }
    const klass = provider_1.default.getClassById(classId);
    if (klass === undefined) {
        throw Error(`[Ploadin][loader] Invalid class ID "${classId}". No class with such ` +
            `ID.`);
    }
    const instance = provider_1.default.getClassInstance(klass, instanceId);
    cacheInstance(classId, instanceId, instance);
    debug_1.default(`Returning instance for classId: ${classId} instanceId: ${instanceId}`);
    return instance;
}
function loader(source, sourceMap, ...args) {
    const instance = getPloadin(this);
    if (instance && instance.loader) {
        debug_1.default(`Calling loader method`);
        return instance.loader(this, source, sourceMap, ...args);
    }
    else {
        debug_1.default(`Not calling loader method. Either instance doesn't exist or doesn't ` +
            `have loader method`);
    }
}
exports.default = loader;
function pitch(remainingRequest, precedingRequest, ...args) {
    const instance = getPloadin(this);
    if (instance && instance.pitch) {
        debug_1.default(`Calling pitch method`);
        return instance.pitch(this, remainingRequest, precedingRequest, ...args);
    }
    else {
        debug_1.default(`Not calling pitch method. Either instance doesn't exist or doesn't ` +
            `have loader method`);
    }
}
exports.pitch = pitch;
