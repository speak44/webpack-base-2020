import type { Dependency, Module as IModule, ModuleClass, ModuleFactory as IModuleFactory, ModuleFactoryClass } from '../types/subclassing';
declare type ModFactoryArgs<MF extends ModuleFactory> = Parameters<MF['create']>;
export declare class ModuleFactory<T extends {
    dependency?: Dependency;
    module?: IModule;
} = {}, I extends IModuleFactory<T> = IModuleFactory<T>> implements IModuleFactory<T> {
    create(...[{ dependencies: [dependency], }, callback,]: ModFactoryArgs<I>): void;
}
interface SubclassOptions {
    type: string;
    moduleClass?: ModuleClass | ModuleClass<IModule>;
}
export declare function subclass<T extends {
    dependency?: Dependency;
    module?: IModule;
} = {}, I extends IModuleFactory<T> = IModuleFactory<T>>({ moduleClass, type }: SubclassOptions): ModuleFactoryClass<I>;
export {};
