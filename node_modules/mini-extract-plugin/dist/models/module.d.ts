/// <reference types="webpack" />
import WebpackModule from 'webpack/lib/Module';
import type { Module as IModule, ModuleClass } from '../types/subclassing';
import type { Hash, RequestShortener } from '../types/webpack';
import { Dependency } from './dependency';
declare const TypedWebpackModule: typeof WebpackModule;
export declare class Module<T extends {
    dependency?: Dependency;
} = {}, Dep extends Dependency = T['dependency'] extends Dependency ? T['dependency'] : Dependency> extends TypedWebpackModule implements IModule {
    id: string;
    request?: string;
    content: Dep['content'];
    private _identifier;
    private _identifierIndex;
    private _miniExtractType;
    constructor(dependency: Dep);
    size(): number;
    identifier(): string;
    readableIdentifier(requestShortener: RequestShortener): string;
    nameForCondition(): string;
    updateCacheModule(module: Module): void;
    needRebuild(): boolean;
    build(options: any, compilation: any, resolver: any, fileSystem: any, callback: any): void;
    updateHash(hash: Hash): void;
}
interface SubclassOptions {
    type: string;
}
export declare function subclass<T extends {
    dependency?: Dependency;
} = {}>({ type }: SubclassOptions): ModuleClass<Module<T, T["dependency"] extends Dependency<{}, import("../types/subclassing-classes").DependencyOptions> ? T["dependency"] : Dependency<{}, import("../types/subclassing-classes").DependencyOptions>>, import("../types/subclassing-classes").Dependency, any[]>;
export {};
