"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Module_1 = __importDefault(require("webpack/lib/Module"));
const lodash_capitalize_1 = __importDefault(require("lodash.capitalize"));
const util_1 = require("../lib/util");
const TypedWebpackModule = Module_1.default;
class Module extends TypedWebpackModule {
    constructor(dependency) {
        const { context } = dependency;
        const moduleType = dependency.moduleType;
        super(moduleType, context === null ? undefined : context);
        this.id = '';
        this.request = undefined;
        this._identifier = dependency.identifier;
        this._identifierIndex = dependency.identifierIndex;
        this.content = dependency.content;
        this._miniExtractType = dependency.miniExtractType;
    }
    size() {
        return this.content.length;
    }
    identifier() {
        return `${this._miniExtractType} ${this._identifier} ${this._identifierIndex}`;
    }
    readableIdentifier(requestShortener) {
        const shortId = requestShortener.shorten(this._identifier);
        const index = this._identifierIndex ? ` (${this._identifierIndex})` : '';
        return `${this._miniExtractType} ${shortId}${index}`;
    }
    nameForCondition() {
        const resource = this._identifier.split('!').pop() || '';
        const idx = resource.indexOf('?');
        if (idx >= 0)
            return resource.substring(0, idx);
        return resource;
    }
    updateCacheModule(module) {
        this.content = module.content;
    }
    needRebuild() {
        return true;
    }
    build(options, compilation, resolver, fileSystem, callback) {
        this.buildInfo = {};
        this.buildMeta = {};
        callback();
    }
    updateHash(hash) {
        super.updateHash(hash);
        hash.update(this.content);
    }
}
exports.Module = Module;
function subclass({ type }) {
    class ModuleSubclass extends Module {
    }
    const className = `${lodash_capitalize_1.default(type)}${ModuleSubclass.name}`;
    util_1.renameClass(ModuleSubclass, className);
    return ModuleSubclass;
}
exports.subclass = subclass;
