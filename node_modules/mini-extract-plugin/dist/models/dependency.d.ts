import webpack from 'webpack';
import type { Dependency as IDependency, DependencyClass, DependencyOptions } from '../types/subclassing';
declare const TypedWebpackDep: typeof webpack.compilation.Dependency;
export declare class Dependency<T extends {
    dependencyOptions?: DependencyOptions;
} = {}, DepOpts extends DependencyOptions = T['dependencyOptions'] extends DependencyOptions ? T['dependencyOptions'] : DependencyOptions> extends TypedWebpackDep implements IDependency {
    identifier: IDependency['identifier'];
    context: IDependency['context'];
    content: IDependency['content'];
    identifierIndex: IDependency['identifierIndex'];
    moduleType: IDependency['moduleType'];
    miniExtractType: IDependency['miniExtractType'];
    constructor({ identifier, content, moduleType, miniExtractType }: DepOpts, context: IDependency['context'], identifierIndex: IDependency['identifierIndex']);
    getResourceIdentifier(): string;
}
interface SubclassOptions {
    name?: string;
    type?: string;
}
export declare function subclass<T extends {
    dependencyOptions?: DependencyOptions;
} = {}>({ type }?: SubclassOptions): DependencyClass<Dependency<T, T["dependencyOptions"] extends DependencyOptions ? T["dependencyOptions"] : DependencyOptions>, any[]>;
export {};
