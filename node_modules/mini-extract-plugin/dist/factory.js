"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_utils_1 = __importDefault(require("schema-utils"));
const ploadin_1 = require("ploadin");
const hooks = __importStar(require("./lib/hook"));
const apply_1 = __importDefault(require("./methods/apply"));
const loader_1 = __importDefault(require("./methods/loader"));
const pitch_1 = __importDefault(require("./methods/pitch"));
const util_1 = require("./lib/util");
function pluginFactory(classOptions) {
    const { pluginName, displayName, className, type, pluginOptionsSchema, hooks: hookOverrides, } = classOptions;
    const REGEXP_PLACEHOLDERS = /\[(name|id|chunkhash)\]/g;
    const DEFAULT_FILENAME = `[name].${type}`;
    class MiniExtractPlugin extends ploadin_1.Ploadin {
        constructor(options = {}) {
            super();
            schema_utils_1.default(pluginOptionsSchema, options, displayName);
            this.options = Object.assign({
                filename: DEFAULT_FILENAME,
                moduleFilename: () => this.options.filename || DEFAULT_FILENAME,
                ignoreOrder: false,
            }, options);
            if (!this.options.chunkFilename) {
                const { filename } = this.options;
                if (filename.match(REGEXP_PLACEHOLDERS)) {
                    this.options.chunkFilename = filename;
                }
                else {
                    this.options.chunkFilename = filename.replace(/(^|\/)([^/]*(?:\?|$))/, '$1[id].$2');
                }
            }
            this.apply = apply_1.default.bind(this);
            this.loader = loader_1.default.bind(this);
            this.pitch = pitch_1.default.bind(this);
            this.hooks = hooks.create();
            hooks.tapMany(pluginName, this.hooks, hookOverrides);
            hooks.callTap({
                name: 'initialize',
                hooks: this.hooks,
                args: [this, options, undefined],
            });
        }
        apply(compiler) {
        }
        loader(loaderContext, source, sourceMap, data) {
        }
        pitch(loaderContext, request, precedingRequest, data) {
        }
    }
    util_1.renameClass(MiniExtractPlugin, className);
    ploadin_1.registerSubclass(MiniExtractPlugin, classOptions);
    return MiniExtractPlugin;
}
exports.default = pluginFactory;
