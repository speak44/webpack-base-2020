"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_capitalize_1 = __importDefault(require("lodash.capitalize"));
const loader_options_json_1 = __importDefault(require("./schemas/loader-options.json"));
const plugin_options_json_1 = __importDefault(require("./schemas/plugin-options.json"));
const factory_1 = __importDefault(require("./factory"));
const subclass = __importStar(require("./lib/subclass"));
__export(require("./api"));
function miniExtractPluginFactory(options) {
    const { type } = options;
    const { moduleClass = subclass.module({ type }) } = options;
    const { pluginName = `mini${type ? '-' + type : ''}-extract-plugin`, displayName = `Mini${type ? ' ' + lodash_capitalize_1.default(type) : ''} Extract Plugin`, className = `Mini${lodash_capitalize_1.default(type) || ''}ExtractPlugin`, moduleType = `${type}/mini-extract`, moduleFactoryClass = subclass.moduleFactory({ type, moduleClass }), dependencyClass = subclass.dependency({ type }), dependencyTemplateClass = subclass.dependencyTemplate({ type }), pluginOptionsSchema = plugin_options_json_1.default, loaderOptionsSchema = loader_options_json_1.default, hooks = [], } = options || {};
    const PluginClass = factory_1.default({
        type,
        moduleType,
        pluginName,
        displayName,
        className,
        moduleClass: moduleClass,
        moduleFactoryClass: moduleFactoryClass,
        dependencyClass: dependencyClass,
        dependencyTemplateClass: dependencyTemplateClass,
        pluginOptionsSchema,
        loaderOptionsSchema,
        hooks,
    });
    return PluginClass;
}
exports.default = miniExtractPluginFactory;
