import type { RequiredKeys } from './util';
import type { ActiveHooks, Overrides } from './hook';
import type { AbstractMiniExtractPlugin, AbstractClassOptions } from './subclassing-abstract';
import type { ParamsDefault } from './subclassing-params';
export * from './subclassing-abstract';
export * from './subclassing-classes';
export * from './subclassing-util';
export { ParamsDefault } from './subclassing-params';
export interface ClassOptions<T extends ParamsDefault = {}> extends AbstractClassOptions<T> {
    hooks?: Overrides;
}
export interface MiniExtractPlugin<T extends ParamsDefault = {}, I extends AbstractMiniExtractPlugin<T> = AbstractMiniExtractPlugin<T>> extends AbstractMiniExtractPlugin<T> {
    hooks: ActiveHooks;
    classOptions: Required<ClassOptions<I['classOptions']>>;
}
export declare type MiniExtractPluginClass<T extends MiniExtractPlugin = MiniExtractPlugin> = RequiredKeys<T['options']> extends never ? {
    new (options?: T['options']): T;
} : {
    new (options: T['options']): T;
};
