import type { Compiler } from 'webpack';
import type { Ploadin } from 'ploadin';
import type { Hook } from 'tapable';
import type { ParamsDefault, ParamsParse } from './subclassing-params';
export interface AbstractClassOptions<T extends ParamsDefault = {}, Params extends ParamsParse<T> = ParamsParse<T>> {
    type: string;
    moduleType?: string;
    pluginName?: string;
    displayName?: string;
    className?: string;
    hooks?: {
        [key: string]: any;
    }[];
    pluginOptionsSchema?: any;
    loaderOptionsSchema?: any;
    dependencyClass?: Params['dependencyClass'];
    moduleFactoryClass?: Params['moduleFactoryClass'];
    moduleClass?: Params['moduleClass'];
    dependencyTemplateClass?: Params['dependencyTemplateClass'];
}
export interface AbstractMiniExtractPlugin<T extends ParamsDefault = {}, Params extends ParamsParse<T> = ParamsParse<T>> extends Ploadin {
    classOptions: Required<AbstractClassOptions<Params>>;
    options: Params['constructorOptions'];
    hooks: {
        [key: string]: Hook;
    };
    apply: (c: Compiler) => void;
    loader(loaderContext: any, source?: string, sourceMap?: string, data?: any): void;
    pitch(loaderContext: any, request: string, precedingRequest: string, data: object): void;
}
