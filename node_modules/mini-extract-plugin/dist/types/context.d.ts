/// <reference types="node" />
import type { Compiler, compilation } from 'webpack';
import type { AbstractMiniExtractPlugin } from './subclassing-abstract';
import type { RenderManifestEntry, RenderManifestOptions } from './webpack';
declare type LoaderContext = any;
export interface ContextBase<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> {
    plugin: MEP;
    classOptions: MEP['classOptions'];
    options: MEP['options'];
}
export interface CompilerContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends ContextBase<MEP> {
    compiler: Compiler;
}
export interface CompilationContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends CompilerContext<MEP> {
    compilation: compilation.Compilation;
}
export interface RenderContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends CompilationContext<MEP> {
    renderEntries: RenderManifestEntry[];
    renderOptions: RenderManifestOptions;
}
export interface PitchContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends ContextBase<MEP> {
    loaderContext: LoaderContext;
    remainingRequest: string;
    precedingRequest: string;
    data: any;
}
export interface PitchCompilerContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends PitchContext<MEP> {
    childCompiler: Compiler;
}
export interface PitchCompilationContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends PitchCompilerContext<MEP> {
    childCompilation: compilation.Compilation;
}
export interface LoaderModuleContext {
    source: string;
    locals: any;
    exports: any;
}
export interface LoaderFuncContext<MEP extends AbstractMiniExtractPlugin = AbstractMiniExtractPlugin> extends ContextBase<MEP> {
    loaderContext: LoaderContext;
    source: string | Buffer;
    sourceMap: string;
    data: any;
}
export {};
