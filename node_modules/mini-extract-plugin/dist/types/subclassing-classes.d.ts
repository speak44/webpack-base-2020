import type { compilation } from 'webpack';
import type { Tapable } from 'tapable';
import type { Constructor, AnyFunc } from './util';
import type { ModuleBase, DependencyBase } from './base';
import type { ModuleFilename } from './module-filename';
import type { RequestShortener } from './webpack';
export interface DependencyTemplate extends Tapable {
    apply: AnyFunc;
}
export declare type DependencyTemplateClass<T extends DependencyTemplate = DependencyTemplate, A extends any[] | undefined = undefined> = Constructor<T, A> & typeof Tapable;
export interface Dependency extends compilation.Dependency, DependencyBase {
    identifierIndex: number;
}
export declare type DependencyClass<T extends Dependency = Dependency, A extends any[] | undefined = any[]> = Constructor<T, A> & {
    compare: typeof compilation.Dependency['compare'];
};
export interface Module extends ModuleBase {
    readableIdentifier(requestShortener: RequestShortener): string;
    request?: string;
}
export declare type ModuleClass<M extends Module = Module, D extends Dependency = Dependency, A extends any[] | undefined = any[]> = Constructor<M, A> & {
    new (dependency: D): M;
};
export declare type ModuleFactoryData<D extends Dependency = Dependency> = {
    dependencies: D[];
} & {
    [key: string]: any;
};
export declare type ModuleFactoryCallback<M extends Module = Module> = (error: Error | null, result: M) => void;
export interface ModuleFactory<T extends {
    dependency?: Dependency;
    module?: Module;
} = {}, Dep extends Dependency = T['dependency'] extends Dependency ? T['dependency'] : Dependency, Mod extends Module = T['module'] extends Module ? T['module'] : Module> {
    create(data: ModuleFactoryData<Dep>, callback: ModuleFactoryCallback<Mod>): void;
}
export declare type ModuleFactoryClass<T extends ModuleFactory = ModuleFactory> = Constructor<T> & typeof Tapable;
export declare type ConstructorOptions = {
    filename?: string;
    moduleFilename?: ModuleFilename;
    chunkFilename?: string;
    ignoreOrder?: boolean;
};
export interface DependencyOptions extends DependencyBase {
}
