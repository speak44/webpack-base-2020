/// <reference types="node" />
import type { compilation, SortableSet } from 'webpack';
import type { Source } from 'webpack-sources';
import type { ModuleBase } from './base';
export interface Module extends ModuleBase {
    _miniExtractType: string;
    _moduleType: string;
    index2: number;
    updateHash: (hash: Hash) => void;
    readableIdentifier: (shortener: RequestShortener) => string;
    loaders: Array<object>;
    identifier: () => string;
    request: string;
}
export interface Hash {
    update(data: string | Buffer, inputEncoding?: string): this;
    digest(encoding: string): string;
}
export interface RequestShortener {
    shorten: (s: string) => string;
}
export declare type ChunkGroup = compilation.ChunkGroup & {
    getModuleIndex2: (module: Module) => number;
    name: string;
};
export interface Chunk extends compilation.Chunk {
    contentHash: {
        [key: string]: string;
    };
    groupsIterable: SortableSet<ChunkGroup>;
}
export declare type CodeGenerationResult = any;
export declare type DependencyTemplate = any;
export declare type RuntimeTemplate = any;
export declare type ModuleGraph = any;
export declare type ChunkGraph = any;
export declare type RenderManifestEntry = {
    render: () => Source;
    filenameTemplate: string | ((pathData: any, info?: any) => string);
    pathOptions?: any;
    identifier: string;
    hash?: string;
    auxiliary?: boolean;
};
export declare type RenderManifestOptions = {
    chunk: Chunk;
    hash: string;
    fullHash: string;
    outputOptions: any;
    codeGenerationResults: Map<Module, CodeGenerationResult>;
    moduleTemplates: {
        javascript: compilation.ModuleTemplate;
    };
    dependencyTemplates: DependencyTemplate[];
    runtimeTemplate: RuntimeTemplate;
    moduleGraph: ModuleGraph;
    chunkGraph: ChunkGraph;
};
