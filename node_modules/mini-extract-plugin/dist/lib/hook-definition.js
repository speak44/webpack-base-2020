"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tapable_1 = require("tapable");
const hook_definition_1 = require("../types/hook-definition");
const helper_1 = require("../types/helper");
function getDefinitions() {
    return hook_definition_1.castHookDefinitions({
        initialize: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('instance'),
                type: {},
            }, {
                name: helper_1.castStrLit('options'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        compiler: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('compilerContext'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        compilation: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('compilationContext'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        beforeRenderMain: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('modules'),
                type: [],
            }),
            return: {
                name: null,
                type: [],
            },
        },
        renderMain: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, { name: helper_1.castStrLit('moduleGroups'), type: [] }),
            return: { name: null, type: [] },
        },
        afterRenderMain: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('renderManifestEntries'),
                type: [],
            }),
            return: { name: null, type: undefined },
        },
        beforeRenderChunk: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('modules'),
                type: [],
            }),
            return: {
                name: null,
                type: [],
            },
        },
        renderChunk: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('moduleGroups'),
                type: [],
            }),
            return: { name: null, type: [] },
        },
        afterRenderChunk: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('renderManifestEntries'),
                type: [],
            }),
            return: { name: null, type: undefined },
        },
        beforeMerge: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('modules'),
                type: [],
            }),
            return: { name: null, type: [] },
        },
        merge: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('modules'),
                type: [],
            }),
            return: { name: null, type: {} },
        },
        afterMerge: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('renderContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('resultSource'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        pitch: {
            hook: tapable_1.AsyncParallelHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('pitchContext'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        childCompiler: {
            hook: tapable_1.AsyncParallelHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('pitchCompilerContext'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        source: {
            hook: tapable_1.AsyncSeriesWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('pitchCompilationContext'),
                type: {},
            }),
            return: { name: null, type: '' },
        },
        childCompilation: {
            hook: tapable_1.SyncHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('pitchCompilationContext'),
                type: {},
            }),
            return: { name: null, type: undefined },
        },
        dependency: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('pitchCompilationContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('loaderModuleContext'),
                type: {},
            }),
            return: { name: null, type: [] },
        },
        extracted: {
            hook: tapable_1.SyncWaterfallHook,
            args: helper_1.castTuple({
                name: helper_1.castStrLit('pitchCompilationContext'),
                type: {},
            }, {
                name: helper_1.castStrLit('remainingSource'),
                type: {},
            }),
            return: { name: null, type: '' },
        },
    });
}
exports.getDefinitions = getDefinitions;
function hooksFromDefinitions() {
    const definitions = getDefinitions();
    return Object.entries(definitions).reduce((hooksObj, [key, hookDef]) => {
        const hookArgs = hookDef.args.map((arg) => arg.name);
        hooksObj[key] = new hookDef.hook(hookArgs);
        return hooksObj;
    }, {});
}
exports.hooksFromDefinitions = hooksFromDefinitions;
